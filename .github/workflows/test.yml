name: Testing Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests (Admin)
        working-directory: apps/admin
        run: pnpm run test:run
        env:
          NODE_ENV: test
          TESTING: true
          NEXT_PUBLIC_SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
        continue-on-error: true # Don't fail if no tests exist

      - name: Run unit tests (Web)
        working-directory: apps/web
        run: pnpm run test:run
        env:
          NODE_ENV: test
          TESTING: true
          NEXT_PUBLIC_SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
        continue-on-error: true # Don't fail if no tests exist

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always() # Run E2E tests even if unit tests fail (but require unit-tests job to complete)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run E2E tests (Admin)
        working-directory: apps/admin
        run: pnpm run test:e2e
        env:
          NODE_ENV: test
          TESTING: true
          NEXT_PUBLIC_SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

      - name: Run E2E tests (Web)
        working-directory: apps/web
        run: pnpm run test:e2e
        env:
          NODE_ENV: test
          TESTING: true
          NEXT_PUBLIC_SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

      - name: Upload E2E test results (Admin)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-admin
          path: apps/admin/playwright-report/
          retention-days: 7

      - name: Upload E2E test results (Web)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-web
          path: apps/web/playwright-report/
          retention-days: 7

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: unit-tests
    if: always() # Run coverage even if unit tests fail

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage (Admin)
        working-directory: apps/admin
        run: pnpm run test:coverage
        env:
          NODE_ENV: test
          TESTING: true
          NEXT_PUBLIC_SUPABASE_TEST_URL: ${{ secrets.SUPABASE_TEST_URL }}
          NEXT_PUBLIC_SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
        continue-on-error: true # Don't fail if no tests exist

      - name: Check coverage thresholds (Admin >50% for MVP)
        working-directory: apps/admin
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              console.log('Admin Coverage:', total.lines.pct + '%');
              if (total.lines.pct < 50) {
                console.error('❌ Admin coverage below 50%:', total.lines.pct + '%');
                process.exit(1);
              } else {
                console.log('✅ Admin coverage meets 50% MVP requirement');
              }
            "
          else
            echo "⚠️ No coverage report found - tests may not exist yet"
          fi
        continue-on-error: true # Don't fail coverage in MVP phase

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/admin/coverage/
            apps/web/coverage/
          retention-days: 30

  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, coverage]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !cancelled()
    # Deploy if E2E tests pass, even if unit tests or coverage has issues

    steps:
      - name: All tests passed
        run: |
          echo "✅ Testing pipeline completed"
          echo "📊 Unit Tests: ${{ needs.unit-tests.result }}"
          echo "🎭 E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "📈 Coverage: ${{ needs.coverage.result }}"
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "🚀 Ready for deployment (E2E tests passed)"
          else
            echo "❌ Deployment blocked - E2E tests failed"
            exit 1
          fi
